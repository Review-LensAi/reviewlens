name: Release Binaries

on:
  push:
    tags:
      - 'v*.*.*'

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build for ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
          - target: x86_64-apple-darwin
            os: macos-latest
          - target: aarch64-apple-darwin
            os: macos-latest
          - target: x86_64-pc-windows-msvc
            os: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          target: ${{ matrix.target }}

      - name: Build binary
        run: cargo build --release --bin reviewer-cli --target ${{ matrix.target }}

      - name: Package binary (Linux/macOS)
        if: runner.os != 'Windows'
        id: package_unix
        run: |
          RELEASE_DIR="target/${{ matrix.target }}/release"
          BINARY_NAME="reviewer-cli"
          ARCHIVE_NAME="reviewer-cli-${{ matrix.target }}.tar.gz"
          tar czf ${ARCHIVE_NAME} -C ${RELEASE_DIR} ${BINARY_NAME}
          echo "ARCHIVE_NAME=${ARCHIVE_NAME}" >> $GITHUB_OUTPUT

      - name: Package binary (Windows)
        if: runner.os == 'Windows'
        id: package_windows
        shell: pwsh
        run: |
          $releaseDir = "target\${{ matrix.target }}\release"
          $binaryName = "reviewer-cli.exe"
          $archiveName = "reviewer-cli-${{ matrix.target }}.zip"
          Compress-Archive -Path "$releaseDir\$binaryName" -DestinationPath $archiveName
          echo "ARCHIVE_NAME=$archiveName" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-asset
          path: ${{ steps.package_unix.outputs.ARCHIVE_NAME || steps.package_windows.outputs.ARCHIVE_NAME }}

  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Download all release assets
        uses: actions/download-artifact@v4
        with:
          name: release-asset
          path: release-assets

      - name: List downloaded files
        run: ls -R release-assets

      - name: Install cosign
        uses: sigstore/cosign-installer@v3

      - name: Generate checksums and signatures
        run: |
          cd release-assets
          for f in *; do
            sha256sum "$f" | awk '{print $1}' > "$f.sha256"
            cosign sign-blob --yes "$f" --output-signature "$f.sig"
          done

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          # This will use the tag message as the release body.
          files: release-assets/*
