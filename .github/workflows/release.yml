name: Release Binaries

on:
  push:
    tags:
      - 'v*.*.*'

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build for ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
          - target: x86_64-apple-darwin
            os: macos-latest
          - target: aarch64-apple-darwin
            os: macos-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          target: ${{ matrix.target }}

      - name: Install cargo-audit and cargo-deny
        run: |
          cargo install --locked cargo-audit cargo-deny

      - name: Build binary
        run: cargo build --release --bin reviewlens --target ${{ matrix.target }}

      - name: Run cargo audit
        run: cargo audit

      - name: Run cargo deny
        run: cargo deny check licenses

      - name: Package binary
        id: package
        run: |
          RELEASE_DIR="target/${{ matrix.target }}/release"
          BINARY_NAME="reviewlens"
          ARCHIVE_NAME="reviewlens-${{ matrix.target }}.tar.gz"
          tar czf ${ARCHIVE_NAME} -C ${RELEASE_DIR} ${BINARY_NAME}
          echo "ARCHIVE_NAME=${ARCHIVE_NAME}" >> $GITHUB_OUTPUT

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-asset
          path: ${{ steps.package.outputs.ARCHIVE_NAME }}

  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0

      - name: Download all release assets
        uses: actions/download-artifact@v4
        with:
          name: release-asset
          path: release-assets

      - name: List downloaded files
        run: ls -R release-assets

      - name: Install cosign
        uses: sigstore/cosign-installer@v3

      - name: Generate checksums and signatures
        run: |
          cd release-assets
          for f in *; do
            sha256sum "$f" | awk '{print $1}' > "$f.sha256"
            cosign sign-blob --yes "$f" --output-signature "$f.sig"
          done

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ghcr.io/${{ github.repository }}:${{ github.ref_name }},ghcr.io/${{ github.repository }}:latest
          platforms: linux/amd64,linux/arm64

      - name: Update Homebrew formula
        env:
          VERSION: ${{ github.ref_name }}
          REPO: ${{ github.repository }}
        run: |
          SHA_LINUX_AMD64=$(cat release-assets/reviewlens-x86_64-unknown-linux-gnu.tar.gz.sha256)
          SHA_LINUX_ARM64=$(cat release-assets/reviewlens-aarch64-unknown-linux-gnu.tar.gz.sha256)
          SHA_MAC_AMD64=$(cat release-assets/reviewlens-x86_64-apple-darwin.tar.gz.sha256)
          SHA_MAC_ARM64=$(cat release-assets/reviewlens-aarch64-apple-darwin.tar.gz.sha256)
          cat > homebrew-tap/reviewlens.rb <<EOF
          class ReviewLens < Formula
            desc "CLI for the Intelligent Code Review Agent"
            homepage "https://github.com/${REPO}"
            version "${VERSION#v}"
            on_macos do
              if Hardware::CPU.arm?
                url "https://github.com/${REPO}/releases/download/${VERSION}/reviewlens-aarch64-apple-darwin.tar.gz"
                sha256 "${SHA_MAC_ARM64}"
              else
                url "https://github.com/${REPO}/releases/download/${VERSION}/reviewlens-x86_64-apple-darwin.tar.gz"
                sha256 "${SHA_MAC_AMD64}"
              end
            end
            on_linux do
              if Hardware::CPU.arm?
                url "https://github.com/${REPO}/releases/download/${VERSION}/reviewlens-aarch64-unknown-linux-gnu.tar.gz"
                sha256 "${SHA_LINUX_ARM64}"
              else
                url "https://github.com/${REPO}/releases/download/${VERSION}/reviewlens-x86_64-unknown-linux-gnu.tar.gz"
                sha256 "${SHA_LINUX_AMD64}"
              end
            end
            def install
              bin.install "reviewlens"
            end
            test do
              system "#{bin}/reviewlens", "--help"
            end
          end
          EOF
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add homebrew-tap/reviewlens.rb
          git commit -m "chore: update Homebrew formula for ${VERSION}" || echo "no changes"
          git push

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: release-assets/*
